'use client';
import React, { useState } from 'react';

export default function GsCoding() {
  const pythonSummary = `Python, a versatile and widely used programming language, has become a cornerstone of modern software development. Its popularity stems from its readability, simplicity, and extensive libraries, making it accessible to both beginners and experienced developers. Python's syntax is designed to be clear and concise, reducing the complexity of code and promoting collaboration. Its dynamic typing and automatic memory management further simplify the development process, allowing developers to focus on problem-solving rather than low-level details. Python's extensive standard library provides a rich set of modules for various tasks, including web development, data analysis, and scientific computing. This eliminates the need to reinvent the wheel and accelerates development cycles. Moreover, Python's thriving ecosystem of third-party libraries, such as NumPy, Pandas, and TensorFlow, expands its capabilities even further. These libraries empower developers to tackle complex challenges in fields like machine learning, artificial intelligence, and data science. Python's cross-platform compatibility allows developers to write code that can run on various operating systems, including Windows, macOS, and Linux. This flexibility makes it suitable for a wide range of applications, from desktop software to web applications and mobile apps. Python's active and supportive community provides a wealth of resources, including tutorials, documentation, and forums. This makes it easy for developers to learn and troubleshoot problems. Python's versatility extends to various domains, including web development (Django, Flask), data science (Pandas, Scikit-learn), and automation (Selenium, Ansible). Its adaptability makes it a valuable tool for diverse projects. Python's role in education is also significant. Its simplicity and readability make it an ideal language for teaching programming concepts to beginners. Its use in introductory computer science courses has contributed to its widespread adoption. Python's continuous evolution and active development ensure its relevance in the ever-changing landscape of technology. Its commitment to open-source principles and community-driven development fosters innovation and collaboration. Python's impact on the software development industry is undeniable. Its ease of use, extensive libraries, and vibrant community have made it a go-to language for countless projects. Its continued growth and evolution solidify its position as a leading programming language.`;

  const typescriptSummary = `TypeScript, a statically typed superset of JavaScript, has gained immense popularity in recent years, particularly for large-scale applications. Its static typing system provides compile-time error checking, reducing the likelihood of runtime errors and improving code maintainability. TypeScript's strict type checking helps catch errors early in the development process, preventing costly bugs and improving code reliability. This is particularly beneficial for complex applications with numerous developers. TypeScript's support for modern JavaScript features, such as classes, interfaces, and modules, enhances code organization and promotes modularity. This makes it easier to manage and maintain large codebases. TypeScript's compatibility with existing JavaScript libraries and frameworks allows developers to seamlessly integrate it into their projects. This eliminates the need to rewrite existing code and facilitates gradual adoption. TypeScript's excellent tooling and IDE support, including code completion, refactoring, and debugging, improves developer productivity. This makes it easier to write and maintain high-quality code. TypeScript's adoption by major frameworks and libraries, such as Angular and React, has further solidified its position as a leading language for web development. Its use in these frameworks ensures type safety and improves code quality. TypeScript's growing community and extensive documentation provide a wealth of resources for developers. This makes it easy to learn and troubleshoot problems. TypeScript's ability to enhance code quality and maintainability makes it a valuable asset for large-scale projects. Its use in enterprise-level applications demonstrates its suitability for complex and mission-critical systems. TypeScript's continuous evolution and active development ensure its relevance in the ever-changing landscape of web development. Its commitment to open-source principles and community-driven development fosters innovation and collaboration. TypeScript's impact on the JavaScript ecosystem is undeniable. Its ability to improve code quality and maintainability has made it a go-to language for countless projects. Its continued growth and evolution solidify its position as a leading language for web development.`;

  const nextjsSummary = `Next.js, a React framework for building server-rendered and statically generated web applications, has revolutionized the way developers approach web development. Its ability to seamlessly blend server-side rendering (SSR) and static site generation (SSG) provides developers with the best of both worlds, resulting in improved performance and SEO. Next.js's built-in routing system simplifies navigation and reduces the complexity of managing routes in React applications. Its file-system-based routing eliminates the need for manual route configuration, making development faster and more intuitive. Next.js's API routes allow developers to build backend functionality directly within their Next.js application. This eliminates the need for a separate backend server, simplifying development and deployment. Next.js's image optimization features automatically optimize images for different devices and screen sizes, improving performance and user experience. This is crucial for modern web applications that rely heavily on images. Next.js's code splitting and prefetching capabilities ensure that only the necessary code is loaded for each page, reducing initial load times and improving performance. Next.js's serverless deployment options make it easy to deploy and scale applications. Its compatibility with various cloud providers and serverless platforms simplifies deployment and management. Next.js's thriving ecosystem of plugins and integrations extends its capabilities and simplifies integration with various tools and services. This allows developers to customize their Next.js applications to meet their specific needs. Next.js's active and supportive community provides a wealth of resources, including tutorials, documentation, and forums. This makes it easy for developers to learn and troubleshoot problems. Next.js's ability to improve performance, SEO, and developer experience has made it a go-to framework for modern web development. Its use in production applications by major companies demonstrates its suitability for complex and mission-critical systems. Next.js's continuous evolution and active development ensure its relevance in the ever-changing landscape of web development. Its commitment to open-source principles and community-driven development fosters innovation and collaboration. Next.js's impact on the React ecosystem is undeniable. Its ability to simplify development and improve performance has made it a leading framework for modern web applications.`;

  const genaiSummary = `Generative AI (GenAI), a rapidly evolving field of artificial intelligence, focuses on creating models that can generate new content, such as text, images, and music. Its ability to produce realistic and creative outputs has opened up new possibilities in various domains. GenAI models, such as Generative Adversarial Networks (GANs) and Variational Autoencoders (VAEs), have demonstrated impressive capabilities in generating realistic images, videos, and audio. These models can learn complex patterns from data and create new content that resembles the training data. GenAI's applications extend beyond creative content generation. It is also used in drug discovery, materials design, and code generation. Its ability to generate novel solutions and accelerate research has made it a valuable tool in various scientific and industrial fields. GenAI's impact on natural language processing (NLP) is significant. Large language models, such as GPT-3 and BERT, can generate coherent and contextually relevant text, enabling applications like chatbots, text summarization, and content creation. GenAI's ability to automate creative tasks has raised concerns about its potential impact on the workforce. While it can automate certain tasks, it also creates new opportunities for human-AI collaboration and enhances human creativity. GenAI's ethical implications are a subject of ongoing debate. Concerns about bias, fairness, and the potential for misuse are being addressed by researchers and policymakers. GenAI's potential to personalize experiences and create tailored content has implications for various industries, including marketing, entertainment, and education. Its ability to adapt to individual preferences and needs can enhance user engagement and satisfaction. GenAI's ability to generate synthetic data can be used to augment training datasets and improve the performance of other AI models. This can be particularly useful in domains where data is scarce or sensitive. GenAI's continuous development and innovation are pushing the boundaries of what is possible with artificial intelligence. Its ability to generate creative and realistic content is transforming various industries and applications. GenAI's future potential is vast, with ongoing research exploring new applications and capabilities. Its ability to learn and adapt to new data and tasks will continue to drive innovation and create new opportunities.`;

  const reactSummary = `React, a JavaScript library for building user interfaces, has become a cornerstone of modern web development. Its component-based architecture and declarative syntax simplify the development of complex UIs. React's ability to create reusable components promotes code modularity and maintainability. This makes it easier to manage large codebases and collaborate with other developers. React's virtual DOM and efficient reconciliation algorithm optimize performance by minimizing DOM manipulations. This results in faster rendering and a smoother user experience. React's extensive ecosystem of libraries and tools extends its capabilities and simplifies integration with various technologies. This allows developers to build complex applications with ease. React's server-side rendering (SSR) capabilities improve SEO and initial page load times. This is crucial for modern web applications that prioritize performance and accessibility. React's ability to create single-page applications (SPAs) provides a seamless user experience by avoiding full page reloads. This results in faster navigation and a more responsive application. React's active and supportive community provides a wealth of resources, including tutorials, documentation, and forums. This makes it easy for developers to learn and troubleshoot problems. React's adoption by major companies and organizations demonstrates its suitability for complex and mission-critical applications. Its use in production environments highlights its reliability and scalability. React's continuous evolution and active development ensure its relevance in the ever-changing landscape of web development. Its commitment to open-source principles and community-driven development fosters innovation and collaboration. React's impact on the front-end development landscape is undeniable. Its ability to simplify UI development and improve performance has made it a go-to library for countless projects. Its continued growth and evolution solidify its position as a leading library for building user interfaces.`;

  const htmlSummary = `HTML (Hypertext Markup Language), the foundation of the World Wide Web, is a markup language used to create and structure the content of web pages. Its simplicity and versatility have made it accessible to millions of developers worldwide. HTML's element-based structure allows developers to define the meaning and organization of content, such as headings, paragraphs, images, and links. This semantic approach enhances accessibility and search engine optimization. HTML's ability to embed multimedia content, such as images, videos, and audio, enriches the user experience and makes web pages more engaging. Its support for forms enables user interaction and data submission, facilitating various online applications. HTML's compatibility with various browsers and devices ensures that web pages can be accessed by a wide audience. Its standardization by the World Wide Web Consortium (W3C) promotes interoperability and consistency across different platforms. HTML's continuous evolution and updates, such as HTML5, have introduced new features and capabilities, including multimedia support, canvas drawing, and geolocation. Its integration with JavaScript and CSS allows developers to create dynamic and interactive web pages. HTML's accessibility features, such as ARIA attributes, enable developers to create web pages that are usable by people with disabilities. Its role in web development extends beyond creating static web pages. HTML is also used in building web applications, mobile apps, and email templates. HTML's simplicity and ease of use make it an ideal language for learning web development. Its use in educational settings has contributed to its widespread adoption. HTML's impact on the internet is undeniable. Its ability to structure and present content has made it the foundation of the World Wide Web. Its continued relevance and evolution ensure its importance in the future of web development.`;

  const cssSummary = `CSS (Cascading Style Sheets), a style sheet language used for describing the presentation of a document written in HTML or XML, has become an essential tool for web developers. Its ability to separate content from presentation allows for greater control over the look and feel of web pages. CSS's cascading nature enables developers to apply styles to multiple elements simultaneously, reducing code duplication and improving maintainability. Its support for various selectors allows developers to target specific elements and apply styles based on their attributes, classes, or IDs. CSS's layout capabilities, such as flexbox and grid, simplify the creation of complex layouts and responsive designs. Its ability to adapt to different screen sizes and devices ensures that web pages look good on any platform. CSS's animation and transition features add interactivity and visual appeal to web pages. Its ability to create smooth and engaging animations enhances the user experience. CSS's modularity and reusability promote code organization and collaboration. Its ability to create reusable style sheets simplifies the development process and reduces code duplication. CSS's compatibility with various browsers and devices ensures that web pages look consistent across different platforms. Its standardization by the W3C promotes interoperability and consistency across different browsers. CSS's continuous evolution and updates, such as CSS3, have introduced new features and capabilities, including animations, transitions, and advanced layout techniques. Its integration with HTML and JavaScript allows developers to create dynamic and interactive web pages. CSS's accessibility features, such as color contrast and font sizing, enable developers to create web pages that are usable by people with disabilities. Its role in web development extends beyond styling static web pages. CSS is also used in building web applications, mobile apps, and email templates. CSS's impact on the internet is undeniable. Its ability to separate content from presentation has made it an essential tool for web developers. Its continued relevance and evolution ensure its importance in the future of web development.`;

  const tailwindCssSummary = `Tailwind CSS, a utility-first CSS framework, has gained significant popularity for its ability to rapidly style web pages. Its approach of providing a set of pre-defined utility classes allows developers to quickly apply styles without writing custom CSS. Tailwind CSS's utility-first approach promotes code reusability and reduces the need for custom CSS. Its ability to quickly style elements and components accelerates the development process. Tailwind CSS's responsive design capabilities simplify the creation of web pages that adapt to different screen sizes. Its ability to apply styles based on breakpoints ensures that web pages look good on any device. Tailwind CSS's customization options allow developers to tailor the framework to their specific needs. Its ability to create custom themes and components enhances the flexibility and scalability of projects. Tailwind CSS's integration with various frameworks and tools simplifies the development process. Its compatibility with React, Vue, and Angular makes it a versatile tool for web developers. Tailwind CSS's active community and extensive documentation provide a wealth of resources for developers. Its ability to quickly style elements and components makes it easy to learn and use. Tailwind CSS's ability to improve developer productivity and maintainability makes it a valuable asset for large-scale projects. Its use in production applications by major companies demonstrates its suitability for complex and mission-critical systems. Tailwind CSS's continuous evolution and updates ensure its relevance in the ever-changing landscape of web development. Its commitment to open-source principles and community-driven development fosters innovation and collaboration. Tailwind CSS's impact on the front-end development landscape is undeniable. Its ability to simplify styling and improve developer productivity has made it a go-to framework for countless projects. Its continued growth and evolution solidify its position as a leading framework for styling web pages.`;

  const javascriptSummary = `JavaScript, a versatile and dynamic programming language, has become an indispensable tool for web developers. Its ability to add interactivity and dynamic content to web pages has revolutionized the user experience. JavaScript's client-side execution allows for real-time updates and interactions without requiring server-side communication. This enhances performance and reduces server load. JavaScript's event-driven programming model enables developers to respond to user actions, such as clicks, mouse movements, and keyboard input. Its ability to create interactive forms and dynamic content enhances user engagement. JavaScript's support for asynchronous operations allows for non-blocking execution, improving performance and responsiveness. Its ability to handle complex tasks without freezing the browser enhances the user experience. JavaScript's compatibility with various browsers and devices ensures that web pages function consistently across different platforms. Its standardization by the ECMAScript specification promotes interoperability and consistency. JavaScript's continuous evolution and updates, such as ES6 and beyond, have introduced new features and capabilities, including classes, modules, and arrow functions. Its integration with HTML and CSS allows developers to create dynamic and interactive web pages. JavaScript's ability to manipulate the Document Object Model (DOM) enables developers to dynamically update and modify web page content. Its role in web development extends beyond creating interactive web pages. JavaScript is also used in building web applications, mobile apps, and server-side applications (Node.js). JavaScript's versatility and widespread adoption have made it an essential language for web developers. Its large and active community provides a wealth of resources and support. JavaScript's impact on the internet is undeniable. Its ability to add interactivity and dynamic content has transformed the user experience. Its continued relevance and evolution ensure its importance in the future of web development.`;

  const nodejsSummary = `Node.js, a JavaScript runtime built on Chrome's V8 JavaScript engine, has revolutionized server-side development. Its event-driven, non-blocking I/O model makes it highly efficient for building scalable and high-performance applications. Node.js's ability to use JavaScript on both the client-side and server-side simplifies development and promotes code reusability. Its use of a single language across the entire stack streamlines the development process. Node.js's npm (Node Package Manager) provides access to a vast ecosystem of open-source libraries and modules. Its ability to easily integrate with various databases and frameworks enhances its versatility. Node.js's asynchronous nature allows it to handle numerous concurrent connections efficiently. Its ability to build real-time applications, such as chat applications and online games, sets it apart from other server-side technologies. Node.js's scalability and performance make it suitable for building microservices and distributed systems. Its ability to handle large volumes of traffic and data makes it ideal for enterprise-level applications. Node.js's active community and extensive documentation provide a wealth of resources for developers. Its ability to quickly build and deploy applications makes it a popular choice for startups and agile development teams. Node.js's ability to improve developer productivity and maintainability makes it a valuable asset for large-scale projects. Its use in production applications by major companies demonstrates its suitability for complex and mission-critical systems. Node.js's continuous evolution and updates ensure its relevance in the ever-changing landscape of web development. Its commitment to open-source principles and community-driven development fosters innovation and collaboration. Node.js's impact on the server-side development landscape is undeniable. Its ability to simplify development and improve performance has made it a go-to platform for countless projects. Its continued growth and evolution solidify its position as a leading platform for building server-side applications.`;

  const expressjsSummary = `Express.js, a fast, unopinionated, minimalist web framework for Node.js, has become a staple in server-side JavaScript development. Its simplicity and flexibility allow developers to quickly build robust and scalable web applications. Express.js's middleware architecture enables developers to easily add functionality to their applications. Its ability to handle routing, request parsing, and error handling simplifies the development process. Express.js's support for various template engines allows developers to render dynamic content on the server-side. Its ability to create API endpoints and handle HTTP requests makes it ideal for building web services. Express.js's integration with various databases and frameworks enhances its versatility. Its ability to easily connect to MongoDB, PostgreSQL, and other databases makes it a powerful tool for web development. Express.js's modular design promotes code reusability and maintainability. Its ability to create reusable components and middleware simplifies the development process. Express.js's active community and extensive documentation provide a wealth of resources for developers. Its ability to quickly build and deploy applications makes it a popular choice for startups and agile development teams. Express.js's ability to improve developer productivity and maintainability makes it a valuable asset for large-scale projects. Its use in production applications by major companies demonstrates its suitability for complex and mission-critical systems. Express.js's continuous evolution and updates ensure its relevance in the ever-changing landscape of web development. Its commitment to open-source principles and community-driven development fosters innovation and collaboration. Express.js's impact on the server-side development landscape is undeniable. Its ability to simplify development and improve performance has made it a go-to framework for countless projects. Its continued growth and evolution solidify its position as a leading framework for building server-side applications.`;

  const initialNews = [
    { category: 'Programming', title: 'Python Summary', content: pythonSummary },
    { category: 'Programming', title: 'TypeScript Summary', content: typescriptSummary },
    { category: 'Web Development', title: 'Next.js Summary', content: nextjsSummary },
    { category: 'AI', title: 'GenAI Summary', content: genaiSummary },
    { category: 'Web Development', title: 'React Summary', content: reactSummary },
    { category: 'Web Development', title: 'HTML Summary', content: htmlSummary },
    { category: 'Web Development', title: 'CSS Summary', content: cssSummary },
    { category: 'Web Development', title: 'Tailwind CSS Summary', content: tailwindCssSummary },
    { category: 'Programming', title: 'JavaScript Summary', content: javascriptSummary },
    { category: 'Backend', title: 'Node.js Summary', content: nodejsSummary },
    { category: 'Backend', title: 'Express.js Summary', content: expressjsSummary },
  ];

  const [news, setNews] = useState(initialNews);
  const [expandedNews, setExpandedNews] = useState({});

  const getNewsByCategory = (category) => {
    return initialNews.filter((item) => item.category === category);
  };

  const toggleExpand = (index) => {
    setExpandedNews((prevExpanded) => ({
      ...prevExpanded,
      [index]: !prevExpanded[index],
    }));
  };

  const truncateContent = (content, index) => {
    if (content.length > 70) {
      const truncated = content.substring(0, 270);
      const remaining = content.substring(270);
      return (
        <>
          {truncated}
          {expandedNews[index] && <>{remaining}</>}
          <button
            onClick={() => toggleExpand(index)}
            className="text-blue-400 mt-2"
          >
            {expandedNews[index] ? 'Show Less' : 'Show More'}
          </button>
        </>
      );
    }
    return content;
  };

  return (
    <div className="bg-gradient-to-r from-blue-900 via-purple-800 to-indigo-900 min-h-screen text-white p-6">
      <div className="max-w-5xl mx-auto">
        <h2 className="text-center font-extrabold text-4xl mb-4">Daily News</h2>
        <hr className="border-gray-400 my-4" />

        <div className="flex justify-around mb-6">
          <button
            className="bg-indigo-600 hover:bg-indigo-700 text-white font-bold py-2 px-4 rounded"
            onClick={() => setNews(initialNews)}
          >
            All News
          </button>
          <button
            className="bg-indigo-600 hover:bg-indigo-700 text-white font-bold py-2 px-4 rounded"
            onClick={() => setNews(getNewsByCategory('Programming'))}
          >
            Programming
          </button>
          <button
            className="bg-indigo-600 hover:bg-indigo-700 text-white font-bold py-2 px-4 rounded"
            onClick={() => setNews(getNewsByCategory('Web Development'))}
          >
            Web Development
          </button>
          <button
            className="bg-indigo-600 hover:bg-indigo-700 text-white font-bold py-2 px-4 rounded"
            onClick={() => setNews(getNewsByCategory('AI'))}
          >
            AI
          </button>
          <button
            className="bg-indigo-600 hover:bg-indigo-700 text-white font-bold py-2 px-4 rounded"
            onClick={() => setNews(getNewsByCategory('Backend'))}
          >
            Backend
          </button>
        </div>

        {news.map((item, index) => (
          <div key={index} className="bg-gray-800 rounded-lg p-4 mb-4 shadow-lg">
            <h3 className="font-bold text-xl mb-2">{item.title}</h3>
            <p>{truncateContent(item.content, index)}</p>
            <p className="text-gray-400 mt-2">Category: {item.category}</p>
          </div>
        ))}
      </div>
    </div>
  );
}